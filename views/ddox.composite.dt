extends layout

block defs
	- import ddox.api;
	- import ddox.ddoc;
	- import ddox.entities;
	- import std.algorithm;
	- import std.typetuple;

	- auto item = cast(CompositeTypeDeclaration)info.item;
	- assert(item !is null);
	- auto cls_item = cast(ClassDeclaration)item;
	- auto intf_item = cast(InterfaceDeclaration)item;

block title
	- auto title = item.nestedName ~ " " ~ to!string(item.kind);
	
block navigation
	include ddox.module-nav
		
block body
	
	section!= formatDdocComment(item.docGroup.text, 2, sec => sec == "$Short" || sec == "$Long")


	- if( cls_item && (cls_item.baseClass || cls_item.derivedInterfaces.length) )
		section
			h2 Inherits from

			ul
				- if( cls_item.baseClass )
					li
						code.prettyprint.lang-d!= info.formatType(cls_item.baseClass)
						| (base class)
				- foreach( intf; cls_item.derivedInterfaces )
					li
						code.prettyprint.lang-d!= info.formatType(intf)
	
	- if( intf_item && intf_item.derivedInterfaces.length )
		section
			h2 Inherits from

			ul
				- foreach( intf; intf_item.derivedInterfaces )
					li
						code.prettyprint.lang-d!= info.formatType(intf)

	- alias TypeTuple!(InterfaceDeclaration, ClassDeclaration, StructDeclaration, EnumDeclaration, AliasDeclaration, TemplateDeclaration) kinds;
	- auto kindnames =      ["Inner interfaces", "Inner classes", "Inner structs", "Unions", "Enums", "Aliases", "Templates"];
	- auto kindnames_sing = ["Inner interface",  "Inner class",   "Inner struct",  "Union",  "Enum",  "Alias",   "Template"];

	- if( hasChild!VariableDeclaration(item) )
		section
			h2 Fields
			table
				col.caption
				tr
					th Field name
					th Field Type
					th Descrption
				- foreach( f; getChildren!VariableDeclaration(item) )
					tr
						td= f.name ~ (f.inheritingDecl ? " [inherited]" : null)
						td!= info.formatType(f.type)
						td!= formatDdocComment(f.docGroup.text, 3, sec => sec == "$Short")

	- FunctionDeclaration[] properties, methods;
	- foreach( itm; getDocGroups!FunctionDeclaration(item) )
		- if( itm.hasAttribute("@property") ) properties ~= itm; else methods ~= itm;

	- if( properties.length )
		section
			h2 Properties
			table
				col.caption
				tr
					th Property name
					th Type
					th Description
				- foreach( p; properties )
					tr
						td
							a(href="#{info.linkTo(p)}")= p.name
							- if( p.inheritingDecl )
								| [inherited]
						- auto mems = p.docGroup ? p.docGroup.members : [cast(Entity)p];
						td!= { foreach(ov; mems){ auto ovf = cast(FunctionDeclaration)ov; if( !ovf ) continue; auto rt = ovf.returnType; if( !canFind(["", "void"], rt.typeName) ) return info.formatType(rt); } return "-"; }()
						td!= formatDdocComment(p.docGroup.text, 3, sec => sec == "$Short")

	- if( methods.length )
		section
			h2 Methods
			table
				col.caption
				tr
					th Method name
					th Description
				- foreach( p; methods )
					tr
						td
							a(href="#{info.linkTo(p)}")= p.name
							- if( p.inheritingDecl )
								| [inherited]
						td!= formatDdocComment(p.docGroup.text, 3, sec => sec == "$Short")

	- foreach( i, kind; kinds )
		- if( hasChild!kind(item) )
			section
				h2= kindnames[i]
				table
					col.caption
					tr
						th #{kindnames_sing[i]} name
						th Description
					- foreach( grp; getDocGroups!kind(item) )
						tr
							td
								a(href="#{info.linkTo(grp)}")= grp.name
								- if( grp.inheritingDecl )
									| [inherited]
							td!= formatDdocComment(grp.docGroup.text, 3, sec => sec == "$Short")

	|!= formatDdocComment(item.docGroup.text, 2, sec => sec != "$Short" && sec != "$Long")
	|!= formatDdocComment(info.mod.docGroup.text, 2, sec => sec == "Authors")
	|!= formatDdocComment(info.mod.docGroup.text, 2, sec => sec == "License" || sec == "Copyright")
