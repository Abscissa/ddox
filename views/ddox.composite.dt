extends ddox.layout

block ddox.defs
	- import ddox.api;
	- import std.algorithm;
	- import std.typetuple;

	- auto item = cast(CompositeTypeDeclaration)info.item;
	- assert(item !is null);
	- auto cls_item = cast(ClassDeclaration)item;
	- auto intf_item = cast(InterfaceDeclaration)item;

block ddox.title
	- auto title = to!string(item.kind) ~ " " ~ item.nestedName ~ (item.templateArgs.length ? "!" ~ item.templateArgs : null);
	
block ddox.description
	p!= info.formatDoc(item.docGroup, 2, sec => sec == "$Short")

	|!= info.formatDoc(item.docGroup, 2, sec => sec == "$Long")

	- if( cls_item && (cls_item.baseClass || cls_item.derivedInterfaces.length) )
		section
			h2 Inherits from

			ul
				- if( cls_item.baseClass )
					li
						code.prettyprint.lang-d!= info.formatType(cls_item.baseClass)
						| (base class)
				- foreach( intf; cls_item.derivedInterfaces )
					li
						code.prettyprint.lang-d!= info.formatType(intf)
	
	- if( intf_item && intf_item.derivedInterfaces.length )
		section
			h2 Inherits from

			ul
				- foreach( intf; intf_item.derivedInterfaces )
					li
						code.prettyprint.lang-d!= info.formatType(intf)

block ddox.sections
	|!= info.formatDoc(item.docGroup, 2, sec => sec != "$Short" && sec != "$Long" && sec != "Copyright" && sec != "Authors" && sec != "License")

block ddox.members
	- alias TypeTuple!(InterfaceDeclaration, ClassDeclaration, StructDeclaration, UnionDeclaration, EnumDeclaration, AliasDeclaration, TemplateDeclaration) kinds;
	- auto kindnames =      ["Inner interfaces", "Inner classes", "Inner structs", "Unions", "Enums", "Aliases", "Templates"];
	- auto kindnames_sing = ["Inner interface",  "Inner class",   "Inner struct",  "Union",  "Enum",  "Alias",   "Template"];

	- FunctionDeclaration[] properties, methods, constructors;
	- foreach( itm; getDocGroups!FunctionDeclaration(item) )
		- if( itm.hasAttribute("@property") )
			- properties ~= itm;
		- else if( itm.name != "this" )
			- methods ~= itm;
		- else
			- constructors ~= itm;

	- if( constructors.length )
		section
			h2 Constructors
			table
				col.caption
				tr
					th Name
					th Description
				- foreach( p; constructors )
					tr
						td
							a(href="#{info.linkTo(p)}", class=declStyleClasses(p))= p.name
						td!= info.formatDoc(p.docGroup, 3, sec => sec == "$Short")

	- if( hasChild!VariableDeclaration(item) )
		section
			h2 Fields
			table
				col.caption
				tr
					th Name
					th Type
					th Description
				- foreach( f; getChildren!VariableDeclaration(item) )
					tr
						td
							a(href="#{info.linkTo(f)}", class=declStyleClasses(f))= f.name
						td!= info.formatType(f.type)
						td!= info.formatDoc(f.docGroup, 3, sec => sec == "$Short")

	- if( properties.length )
		section
			h2 Properties
			table
				col.caption
				tr
					th Name
					th Type
					th Description
				- foreach( p; properties )
					tr
						td
							a(href="#{info.linkTo(p)}", class=declStyleClasses(p))= p.name
						- auto mems = p.docGroup ? p.docGroup.members : [cast(Entity)p];
						td!= { foreach(ov; mems){ auto ovf = cast(FunctionDeclaration)ov; if( !ovf ) continue; auto rt = ovf.returnType; if( !canFind(["", "void"], rt.typeName) ) return info.formatType(rt); } return "-"; }()
						td!= info.formatDoc(p.docGroup, 3, sec => sec == "$Short")

	- if( methods.length )
		section
			h2 Methods
			table
				col.caption
				tr
					th Name
					th Description
				- foreach( p; methods )
					tr
						td
							a(href="#{info.linkTo(p)}", class=declStyleClasses(p))= p.name
						td!= info.formatDoc(p.docGroup, 3, sec => sec == "$Short")

	- foreach( i, kind; kinds )
		- if( hasChild!kind(item) )
			section
				h2= kindnames[i]
				table
					col.caption
					tr
						th Name
						th Description
					- foreach( grp; getDocGroups!kind(item) )
						tr
							td
								a(href="#{info.linkTo(grp)}", class=declStyleClasses(grp))= grp.name
							td!= info.formatDoc(grp.docGroup, 3, sec => sec == "$Short")

block ddox.authors
	|!= info.formatDoc(info.mod.docGroup, 0, sec => sec == "Authors")
block ddox.license
	|!= info.formatDoc(info.mod.docGroup, 0, sec => sec == "License")
block ddox.copyright
	|!= info.formatDoc(info.mod.docGroup, 0, sec => sec == "Copyright")
