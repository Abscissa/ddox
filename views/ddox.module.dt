extends ddox.layout

block ddox.defs
	- import ddox.api;
	- import std.typetuple;

block ddox.title
	- auto title = "Module " ~ info.mod.qualifiedName;
	
block ddox.navigation
	- if( info.settings.navPackageTree )
		include ddox.inc.module-tree
	- else
		include ddox.inc.module-list
		
block ddox.body
	
	section!= info.formatDoc(info.mod.docGroup, 2, sec => sec != "License" && sec != "Copyright" && sec != "Authors")
	
	- alias TypeTuple!(FunctionDeclaration, InterfaceDeclaration, ClassDeclaration, StructDeclaration, UnionDeclaration, EnumDeclaration, TemplateDeclaration) kinds;
	- auto kindnames =      ["Functions", "Interfaces", "Classes", "Structs", "Unions", "Enums", "Templates"];
	- auto kindnames_sing = ["Function",  "Interface",  "Class",   "Struct",  "Union",  "Enum",  "Template"];

	- foreach( i, kind; kinds )
		- if( hasChild!kind(info.mod) )
			section
				h2= kindnames[i]
				table
					col.caption
					tr
						th #{kindnames_sing[i]} name
						th Description
					- foreach( grp; getDocGroups!kind(info.mod) )
						tr
							td
								a(id="#{grp.name}", href="#{info.linkTo(grp)}")= grp.name
							td!= info.formatDoc(grp.docGroup, 3, sec => sec == "$Short")

	- if( hasChild!AliasDeclaration(info.mod) )
		section
			h2 Type aliases
			table
				col.caption
				tr
					th Alias name
					th Type
					th Description
				- foreach( f; getDocGroups!AliasDeclaration(info.mod)  )
					tr
						td
							a(id="#{f.name}")
							|= f.name
						td
							- if( f.targetType )
								|!= info.formatType(f.targetType)
						td!= info.formatDoc(f.docGroup, 3, sec => sec == "$Short")

	!= info.formatDoc(info.mod.docGroup, 2, sec => sec == "Authors")
	!= info.formatDoc(info.mod.docGroup, 2, sec => sec == "License" || sec == "Copyright")
